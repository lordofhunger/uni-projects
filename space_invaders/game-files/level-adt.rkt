;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                   LEVEL ADT                                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; make-level-adt :: number, number -> level-adt
(define (make-level-adt game-width game-height level)
  (let* ((xwing-starting-position
          (make-position-adt xwing-spot
                             xwing-lane))
         (scoreboard-position
          (make-position-adt score-x infocolumn-y))
         (difficulty (inexact->exact (ceiling (/ level difficulty-divider))))
         (fleet (make-fleet-adt #f difficulty))
         (xwing (make-xwing-adt xwing-starting-position))
         (score (make-scoreboard-adt highscore-text-file scoreboard-position))
         (fleet-time timer-start)
         (bolt-time timer-start)
         (powerup-time timer-start)
         (shoot-time timer-start)
         (triple-time timer-start)
         (bolts (make-bolts-adt))
         (powerups (make-powerups-adt))
         (pause? (if (= level first-level)
                    #t
                    #f))
         (defeat? #f)
         (shield-time timer-start)
         (shield-power? #f)
         (triple-bolt? #f)
         (shoot-faster? #f)
         (fast-shot-time timer-start)
         (stealth-time timer-start)
         (song? #f)
         (song-time timer-start)
         (muted? #f)
         (won? #f)
         (restart? #f)
         (stealth? #f)
         (p? #f)
         (leveled #f))

    (define (keyfunction status key)
      (cond ((eq? status 'pressed)
             (cond ((and (not pause?) (eq? key 'left))
                    (xwing 'left-xwing!))
                   ((and (not pause?) (eq? key 'right))
                    (xwing 'right-xwing!))
                   ((and (not pause?) (eq? key up))
                    (if (and (not muted?) (xwing 'alive?))
                        (play-sound hit-sound2 #t))
                    (if triple-bolt?
                        ((bolts 'add-bolt!) 'triple-wing single-power dispatch-level)
                        ((bolts 'add-bolt!) 'xwing single-power dispatch-level)))
                   ((and (eq? key #\p) (not defeat?))
                    (set! pause? (not pause?))
                    (set! p? #t))
                   ((eq? key #\r)
                    (set! restart? #t))                     
                   ((eq? key #\m)
                    (set! muted? (not muted?)))
                   ((eq? key #\1)
                    (set! shield-power? #t)
                    (xwing 'shield))
                   ((eq? key #\2)
                    (set! shoot-faster? #t))
                   ((eq? key #\3)
                    (set! triple-bolt? #t))
                   ((eq? key #\4)
                    (xwing 'life-more!))
                   ((eq? key #\5)
                    (fleet 'reinforcements!))
                   ((eq? key #\6)
                    (set! won? #t))                    
                   ((eq? key #\7)
                    (set! stealth? #t))
                   ((eq? key #\8)
                    (if (and (not song?) (not muted?))
                        (begin (play-sound song2 #t)
                               (set! song? #t))))
                   ((eq? key #\9)
                    (xwing 'powerup9))))))

    (define (rightborder-tie? vehicle)
      (if (vehicle 'position)
          (= ((vehicle 'position) 'x) right-border)
          #f))

    (define (leftborder-tie? vehicle)
      (if (vehicle 'position)
          (= ((vehicle 'position) 'x) left-border)
          #f))
  
    (define (tie-bolt-collision bolts-to-check tie)
      (let ((tie-pos (tie 'position)))
            
        (cond ((or (not (tie 'alive?)) (null? bolts-to-check)))
              (((((car bolts-to-check) 'position) 'rough-compare?) tie-pos)
               ((tie 'lives-less!) ((car bolts-to-check) 'power))
               ((car bolts-to-check) 'evaporate!)
               (if (not (tie 'alive?))
                   (begin (if (not muted?)
                              (play-sound explosion-sound #t))
                          (if (and (= (random 5) 1) (not (((xwing 'position) 'powerup-compare?) tie-pos)))
                              ((powerups 'add-powerup!) tie-pos (random 1 10)
                                                        ))))
               (if (tie 'shooter?)
                   (score 'shooter-life-score)
                   (score 'tie-life-score))
               
               (tie-bolt-collision (cdr bolts-to-check) tie))
              ((< (((car bolts-to-check) 'position) 'y) bolt-top)
               ((car bolts-to-check) 'evaporate!)
               
               (tie-bolt-collision (cdr bolts-to-check) tie))
              (else (tie-bolt-collision (cdr bolts-to-check) tie)))))

    (define (xwing-pwp-collision powerups deltatime)
      (cond ((null? powerups))
            (((((car powerups) 'position) 'rough-compare?) (xwing 'position))
             (score 'power-score)
             (cond ((= 1 ((car powerups) 'kind)) (set! shield-power? #t)
                                                 (xwing 'shield))
                   ((= 2 ((car powerups) 'kind)) (set! shoot-faster? #t))
                   ((= 3 ((car powerups) 'kind)) (set! triple-bolt? #t))
                   ((= 4 ((car powerups) 'kind)) (xwing 'life-more!))
                   ((= 5 ((car powerups) 'kind)) (fleet 'reinforcements!))
                   ((= 6 ((car powerups) 'kind)) (set! won? #t))                                   
                   ((= 7 ((car powerups) 'kind)) (set! stealth? #t))
                   ((= 8 ((car powerups) 'kind)) (if (and (not song?) (not muted?))
                                                     (begin (play-sound song2 #t)
                                                            (set! song? #t))))
                   ((= 9 ((car powerups) 'kind)) (xwing 'powerup9)))
             (if (not muted?)
                 (play-sound powerup-sound #t))
             (let ((xwing-pos (xwing 'position)))
               ((car powerups) 'taken!)
              
               (xwing-pwp-collision (cdr powerups) deltatime)))
            (else (xwing-pwp-collision (cdr powerups) deltatime))))

    (define (xwing-bolt-collision bolts-to-check)
      (cond ((or (null? bolts-to-check) (not (xwing 'position))))
            ((< bottom-border (((car bolts-to-check) 'position) 'y))
             ((car bolts-to-check) 'evaporate!)
             
             (xwing-bolt-collision (cdr bolts-to-check)))
            (((((car bolts-to-check) 'position) 'rough-compare?) (xwing 'position))
             ((xwing 'lives-less!) ((car bolts-to-check) 'power))
             ((car bolts-to-check) 'evaporate!)
             
             (xwing-bolt-collision (cdr bolts-to-check))
             (if (not (xwing 'alive?))
                 (begin 
                        (set! defeat? #t)
                        (set! pause? #t)
                        (if (not muted?)
                            (play-sound game-over-sound #t))
                        (fleet 'delete-ties!))))
            (else (xwing-bolt-collision (cdr bolts-to-check)))))

    (define (cleanse-the-fleet fleet)
      (define (iter left result)
        (cond ((null? left) (reverse result))
              (((car left) 'alive?) (iter (cdr left) (cons (car left) result)))
              (else (iter (cdr left) result))))
      (iter fleet '()))

    (define (cleanse-the-ammo ammo)
      (define (iter left result)
        (cond ((null? left) (reverse result))
              (((car left) 'active?) (iter (cdr left) (cons (car left) result)))
              (else (iter (cdr left) result))))
      (iter ammo '()))
             
    (define (collision-detection deltatime)
      (if (or (not (null? (bolts 'xwing-bolt-list))) (not (null? (bolts 'tie-bolt-list))) (not (null? (powerups 'powerup-list))))
          (let* ((bolt-list (bolts 'xwing-bolt-list))
                 (tie-bolt-list (bolts 'tie-bolt-list))
                 (collisions ((fleet 'for-each-tie)
                              (lambda (tie-adt)
                                (if (tie-adt 'position)
                                    (tie-bolt-collision bolt-list tie-adt))))))
            (xwing-pwp-collision (powerups 'powerup-list) deltatime)
            (xwing-bolt-collision tie-bolt-list)
            ((fleet 'fleet-list!)(cleanse-the-fleet (fleet 'fleet-list)))
            ((bolts 'bolt-list!) 'xwing (cleanse-the-ammo (bolts 'xwing-bolt-list)))
            ((bolts 'bolt-list!) 'ties (cleanse-the-ammo (bolts 'tie-bolt-list)))
            ((powerups 'powerup-list!)(cleanse-the-ammo (powerups 'powerup-list))))))

    (define (fleet-mover game-adt deltatime)
      (if (> fleet-time game-speed)

          (begin (collision-detection deltatime)
                 (cond ((member #t ((fleet 'for-each-tie)rightborder-tie?)) (fleet 'change-direction!)
                                                                            ((fleet 'for-each-tie) (lambda (tie) (tie 'downleft!))))
                       ((member #t ((fleet 'for-each-tie)leftborder-tie?))(fleet 'change-direction!)
                                                                          ((fleet 'for-each-tie) (lambda (tie) (tie 'downright!))))
                       ((member xwing-lane ((fleet 'for-each-tie) (lambda (tie)
                                                                    (if (tie 'position)
                                                                        (/ ((tie 'position) 'y) 1.0)))))
                    
                        (set! defeat? #t)
                        (set! pause? #t)
                        (play-sound game-over-sound #t)
                        (fleet 'delete-ties!)
                        )
                       ((and (xwing 'alive?)
                             (not (member #t ((fleet 'for-each-tie) (lambda (tie)
                                                                      (tie 'alive?))))))
                        (game-adt 'victory))
                       ((fleet 'moving-right?) ((fleet 'for-each-tie) (lambda (tie) (tie 'right!))))
                       ((not (fleet 'moving-right?)) ((fleet 'for-each-tie) (lambda (tie) (tie 'left!)))))
                 (set! fleet-time timer-start))))

    (define (bolt-mover)
      (if (> bolt-time bolt-speed)
          (begin (if (not (null? (bolts 'xwing-bolt-list)))
                     (for-each (lambda (bolt)
                                 (bolt 'up!))(bolts 'xwing-bolt-list)))
                 (if (not (null? (bolts 'tie-bolt-list)))
                     (for-each (lambda (bolt)
                            (bolt 'down!))(bolts 'tie-bolt-list)))
                 (set! bolt-time timer-start))))

    (define (powerup-mover)
      (if (> powerup-time powerup-speed)
          (begin (if (not (null? (powerups 'powerup-list)))
                     (map (lambda (powerup)
                            (powerup 'down!)) (powerups 'powerup-list)))
                 (set! powerup-time timer-start))))


    (define (shoot-checker? speed)
      (if (> shoot-time speed)
          (if (and (xwing 'alive?)(> (length (fleet 'shooter-list)) 1))
              (begin (if (not muted?)
                         (play-sound hit-sound #t))
                     ((bolts 'add-bolt!)((fleet 'pick-shooter)(random 1 (length (fleet 'shooter-list)))) (random 1 3) dispatch-level)
                     (set! shoot-time timer-start)
                     ))))
    
    (define (shooter)
      (cond (shoot-faster? (shoot-checker? fast-shot-speed))
            (else (shoot-checker? shoot-speed))))

    (define (time-checker powerup)
      (cond ((eq? powerup 'shield) (if (> shield-time shield-speed)
                                       (begin (xwing 'unshield)
                                              (set! shield-power? #f)
                                              (set! shield-time timer-start))))
            ((eq? powerup 'stealth)(if (> stealth-time stealth-speed)
                                       (begin (set! stealth? #f)                       
                                              (set! stealth-time timer-start))))
            ((eq? powerup 'song)(if (> song-time song-speed)
                                    (begin (set! song? #f)
                                           (set! song-time timer-start))))
            ((eq? powerup 'fast-shot)(if (> fast-shot-time powerup-shoot-speed)
                                         (begin (set! shoot-faster? #f)
                                                (set! fast-shot-time timer-start))))
            ((eq? powerup 'triple-bolt)(if (> triple-time triple-speed)
                                           (begin (set! triple-bolt? #f)
                                                  (set! triple-time timer-start))))))
   
    (define (gameloop deltatime game-adt)
      (if (not pause?)
          (begin
            (set! fleet-time (+ fleet-time deltatime))
            (set! bolt-time (+ bolt-time deltatime))
            (set! powerup-time (+ powerup-time deltatime))
            (if shoot-faster? (set! fast-shot-time (+ fast-shot-time deltatime)))
            (set! shoot-time (+ shoot-time deltatime))
            (if shield-power? (set! shield-time (+ shield-time deltatime)))
            (if triple-bolt? (set! triple-time (+ triple-time deltatime)))
            (if stealth? (set! stealth-time (+ stealth-time deltatime)))
            (if song? (set! song-time (+ song-time deltatime)))
           (fleet-mover game-adt deltatime)
            (time-checker 'shield)
            (time-checker 'stealth)
            (time-checker 'song)
            (bolt-mover)
            (powerup-mover)
            (shooter)
            (time-checker 'triple-bolt)
            (time-checker 'fast-shot))))

    (define (dispatch-level msg)
      (cond ((eq? msg 'xwing) xwing)
            ((eq? msg 'fleet) fleet)
            ((eq? msg 'bolts) bolts)
            ((eq? msg 'score) score)
            ((eq? msg 'shield-power?) shield-power?)
            ((eq? msg 'difficulty) difficulty)
            ((eq? msg 'stealth?) stealth?)
            ((eq? msg 'level) level)
            ((eq? msg 'powerups) powerups)
            ((eq? msg 'update!) gameloop)
            ((eq? msg 'keyfunction) keyfunction)
            ((eq? msg 'song-time) song-time)
            ((eq? msg 'song-time!) (lambda (x) (set! song-time x)))
            ((eq? msg 'song?) song?)
            ((eq? msg 'won?) won?)
            ((eq? msg 'p?) p?)
            ((eq? msg 'p!) (set! p? #f))
            ((eq? msg 'defeat?) defeat?)
            ((eq? msg 'restart?) restart?)
            ((eq? msg 'set-song!) (lambda (x) (set! song? x)))))
    dispatch-level))

